BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

we use the env.config."field" to Fully supporte all the configuration fields. And we didn't use magic numbers.
We use it in :  
    Player.createArtificialIntelligence
    Player.point
    Player.penalty
    Dealer constructor
    dealer.removeCardsFromTable
    Dealer.timerLoop
    Dealer.placeCardsOnTable
    Delaer.updateTimerDisplay
    Delaer.removeAllCardsFromTable
    Delaer.calculateDealerSleep
    Table constructor
    Table.placeCard
    Table.removeCard
    Table.removeToken
We have changed several fields in the config file and confirmed that the changes were made succesfully.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

We are not entitled to this bonus.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

*easy to see that we do not create another threads other then 1 thread per player + 1 additional thread for non-human players.
the players are in block when there is no action to do, and when they are waiting to the dealer to check there slots.
also the Ai threads are in block when the action queue is full (3 slots have been generate by it).
the dealer thread remains in this blocked state until the elapsed time surpasses the specified dealerSleepMillis duration.
It is noteworthy that the dealerSleepMillis value is computed to ensure a seamless and uninterrupted progression of the timer,
thereby minimizing abrupt jumps in its functioning.
The dealer thread may be waken if there is a set that needs to be checked.
we tested it by using prints in the code that indicates that the threads are in blocked states and also we checked
that the threads are in block state when the condition states above are satisfied.